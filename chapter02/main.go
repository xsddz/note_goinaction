/*
1. 所有处于同一个文件夹里的代码文件，必须使用同一个包名。按照惯例，包和文件夹同名。
2. 一个包定义一组编译过的代码，包的名字类似命名空间，可以用来间接访问包内声明的标识符。
*/
package main

/* 关键字 import 就是导入一段代码，让用户可以访问其中导出的标识符，如类型、函 数、常量和接口。*/
import (
	/* 编译器查找包的时候，总是会到 GOROOT 和 GOPATH 环境变量引用的位置去查找。使用 go env 查看所有环境变量。*/

	/* 从标准库中导入代码时，只需要给出要导入的包名。*/
	"log"
	"os"

	/*
		1. 导入第三方包时，需给出 GOPATH/src 目录下的路径信息。
		2. 为了让程序的可读性更强，Go 编译器不允许声明导入某个包却不使用。下划线让编译器接受
		这类导入，并且调用对应包内的所有代码文件里定义的 init 函数。
	*/
	_ "notes.goinaction/chapter02/matchers"
	"notes.goinaction/chapter02/search"
)

// init 程序里所有导入包里的 init 方法都会在 main 函数启动前被调用
func init() {
	// 将日志输出到标准输出
	log.SetOutput(os.Stdout)
}

/*
main 整个程序的入口

1. 使用关键字 func 声明函数，关键字后面紧跟着函数名、参数以及返回值。
2. main 函数保存在名为 main 的包里。如果 main 函数不在 main 包里，构建工具就不会生成可执行的文件。
*/
func main() {
	/*
		调用 search 包里的 Run 函数

		在 Go 语言里，标识符要么从包里公开，要么不从包里公开。当代码导入了一个包时，程序可以
		直接访问这个包中任意一个公开的标识符。这些标识符以大写字母开头。以小写字母开头的标识符
		是不公开的，不能被其他包中的代码直接访问。
	*/
	search.Run("president")
}
